import numpy as np
from randomnumbers.constants import default_digits


class Distribution(object):
    """
    Generic Distribution class. This class contains the basic functionality of -
    1. storing current sample
    2. summarising current sample (.summarise method)
    3. drawing a new sample from a given distribution (.draw method).

    Child classes should inherit this class and update the self.generator attribute
    with their required numpy number generator (e.g. numpy.random.binomial).
    Each child class should be responsible for parsing the distribution specific config (mean/lam/n)
    that the user supplies when initialised.
    """
    def __init__(self):
        self.current_sample = []
        self.generator = None

    def draw(self, digits=3, **kwargs):
        """
        Generate an array of random numbers, round them to "self.sigfig", update state and return array.

        Note: Expects for self.generator to be overwritten by children with generator
         specific for child distribution (e.g - np.random.normal for NormalDistribution child)

        :param digits: int, values will be rounded to 'digits' decimal places
        :param kwargs:
        :return: array, of floats rounded to "digits" decimal_places
        """

        self.current_sample = np.around(self.generator(**kwargs), digits)
        return self.current_sample

    def summarise(self):
        """
        Find and process key moments from the most recent random sample generated by user.
        Print summary of key moments in user's PY interpreter

        :return: inform user method - only output generated into user's PY interpreter
        """
        print("Key moments from the current sample are - \n"
              "min: {}, max: {}, mean: {}, std: {}".
              format(np.min(self.current_sample),
                     np.max(self.current_sample),
                     round(np.mean(self.current_sample), default_digits),
                     round(np.std(self.current_sample), default_digits))
              )


class NormalDistribution(Distribution):
    def __init__(self, **kwargs):
        super().__init__()
        self.generator = np.random.normal

        if kwargs.get("mean", None) is not None:
            self.mean = kwargs.get("mean")
        else:
            print("No mean argument supplied during init, default of 0 will be used")
            self.mean = 0

        if kwargs.get("sd", None) is not None:
            self.sd = kwargs.get("sd")
        elif kwargs.get("spread", None) is not None:
            self.sd = kwargs.get("spread")
        else:
            print("No sd argument supplied during init, default of 2 will be used")
            self.sd = 2

    def draw(self, size=5, digits=3, **kwargs):
        return super().draw(loc=self.mean, scale=self.sd, size=size, digits=digits)


class BinomialDistribution(Distribution):

    def __init__(self, **kwargs):
        super().__init__()
        self.generator = np.random.binomial

        if kwargs.get("p") is not None:
            self.p = kwargs.get("p")
        elif kwargs.get("prob") is not None:
            self.p = kwargs.get("prob")
        else:
            print("No p argument supplied during init, default of 0.5 will be used")
            self.p = 0.5

        if kwargs.get("n") is not None:
            self.n = kwargs.get("n")
        elif kwargs.get("trials") is not None:
            self.n = kwargs.get("trials")
        else:
            print("No trials argument supplied during init, default of 30 will be used")
            self.n = 30

    def draw(self, size=5, digits=3, **kwargs):
        return super().draw(n=self.n, p=self.p, size=size)


class PoissonDistribution(Distribution):

    def __init__(self, **kwargs):
        super().__init__()
        self.generator = np.random.poisson

        if kwargs.get("lam") is not None:
            self.lam = kwargs.get("lam")
        elif kwargs.get("lambda") is not None:
            self.lam = kwargs.get("lambda")
        else:
            print("No lam argument supplied during init, default of 3 will be used")
            self.lam = 3

    def draw(self, size=5, digits=3, **kwargs):
        return super().draw(lam=self.lam, size=size, digits=digits)

